import os
import asyncio
import redis
from rq import Worker, Queue, Connection
from aiogram import Bot
from aiogram.exceptions import TelegramRetryAfter, TelegramBadRequest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram
MAX_MESSAGES_PER_SECOND = 25
DELAY_BETWEEN_MESSAGES = 1.0 / MAX_MESSAGES_PER_SECOND


class TelegramSender:
    def __init__(self):
        self.bot = Bot(token=os.getenv('BOT_TOKEN'))

    async def send_message(self, user_id: int, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
        try:
            await self.bot.send_message(chat_id=user_id, text=message)
            print(f"‚úÖ Message sent to user {user_id}")
            return True

        except TelegramRetryAfter as e:
            # –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã - –∂–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            wait_time = e.retry_after
            print(f"‚è≥ Rate limit hit, waiting {wait_time} seconds")
            await asyncio.sleep(wait_time)
            # –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            return await self.send_message(user_id, message)

        except TelegramBadRequest as e:
            # –ù–µ–≤–µ—Ä–Ω—ã–π chat_id –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
            print(f"‚ùå Failed to send to {user_id}: {e}")
            return False

        except Exception as e:
            print(f"‚ö†Ô∏è Unexpected error for user {user_id}: {e}")
            return False

    async def close(self):
        await self.bot.session.close()


def send_telegram_message(user_id: int, message: str):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è RQ Worker
    """
    sender = TelegramSender()

    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        result = loop.run_until_complete(
            asyncio.gather(
                asyncio.sleep(DELAY_BETWEEN_MESSAGES),
                sender.send_message(user_id, message)
            )
        )
        return result[1]  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
    finally:
        loop.run_until_complete(sender.close())


if __name__ == "__main__":
    print("üöÄ Starting RQ Worker for Telegram messages...")

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    redis_conn = redis.Redis(
        host=os.getenv('REDIS_HOST', 'redis'),
        port=int(os.getenv('REDIS_PORT', 6379)),
        db=0
    )

    # –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞
    with Connection(redis_conn):
        worker = Worker(['telegram_messages'])
        print("‚úÖ Worker started. Listening for messages...")
        worker.work()