services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${DB_NAME:-myapp_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  backup:
    image: postgres:15-alpine
    profiles: [ "backup" ]  # запускается только когда нужно
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    command: |
      bash -c "
        pg_dump -h postgres -U $${DB_USER} -d $${DB_NAME} > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
        echo 'Backup completed'
      "
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    depends_on:
      - postgres
    networks:
      - app_network

  fastapi_app:
    build:
      context: ./src
    env_file:
      - .env
    container_name: fastapi_app
    expose:
      - "8000"
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    networks:
      - app_network

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - fastapi_app
    networks:
      - app_network

  telegram_bot:
    build:
      context: ./bot
    container_name: telegram_bot
    environment:
      - FASTAPI_URL=http://fastapi_app:8000
    env_file:
      - .env
    depends_on:
      - fastapi_app
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data: